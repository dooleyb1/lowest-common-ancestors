var cov_1ok0aezb88=function(){var path="/Users/xsellco/github/college/lowest-common-ancestors/dag/javascript/index.js",hash="b6dac49d163eccb09e264d73873a13097a290ac6",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/xsellco/github/college/lowest-common-ancestors/dag/javascript/index.js",statementMap:{"0":{start:{line:4,column:8},end:{line:4,column:29}},"1":{start:{line:5,column:12},end:{line:5,column:28}},"2":{start:{line:9,column:2},end:{line:9,column:19}},"3":{start:{line:10,column:2},end:{line:10,column:26}},"4":{start:{line:14,column:0},end:{line:16,column:1}},"5":{start:{line:15,column:2},end:{line:15,column:48}},"6":{start:{line:22,column:2},end:{line:23,column:34}},"7":{start:{line:23,column:4},end:{line:23,column:34}},"8":{start:{line:26,column:20},end:{line:28,column:4}},"9":{start:{line:27,column:4},end:{line:27,column:27}},"10":{start:{line:32,column:4},end:{line:34,column:6}},"11":{start:{line:33,column:6},end:{line:33,column:32}},"12":{start:{line:38,column:2},end:{line:86,column:8}},"13":{start:{line:41,column:17},end:{line:41,column:36}},"14":{start:{line:44,column:4},end:{line:47,column:5}},"15":{start:{line:45,column:6},end:{line:45,column:30}},"16":{start:{line:46,column:6},end:{line:46,column:25}},"17":{start:{line:50,column:15},end:{line:50,column:35}},"18":{start:{line:53,column:35},end:{line:55,column:6}},"19":{start:{line:54,column:6},end:{line:54,column:50}},"20":{start:{line:58,column:4},end:{line:85,column:5}},"21":{start:{line:60,column:6},end:{line:66,column:7}},"22":{start:{line:61,column:8},end:{line:61,column:29}},"23":{start:{line:64,column:8},end:{line:64,column:46}},"24":{start:{line:65,column:8},end:{line:65,column:20}},"25":{start:{line:70,column:6},end:{line:70,column:31}},"26":{start:{line:73,column:6},end:{line:84,column:8}},"27":{start:{line:76,column:8},end:{line:76,column:29}},"28":{start:{line:76,column:17},end:{line:76,column:29}},"29":{start:{line:79,column:8},end:{line:79,column:51}},"30":{start:{line:82,column:8},end:{line:82,column:32}},"31":{start:{line:83,column:8},end:{line:83,column:20}},"32":{start:{line:89,column:0},end:{line:89,column:37}}},fnMap:{"0":{name:"Walker",decl:{start:{line:8,column:9},end:{line:8,column:15}},loc:{start:{line:8,column:27},end:{line:11,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:14,column:25},end:{line:14,column:26}},loc:{start:{line:14,column:42},end:{line:16,column:1}},line:14},"2":{name:"lowestCommonAncestor",decl:{start:{line:19,column:9},end:{line:19,column:29}},loc:{start:{line:19,column:59},end:{line:87,column:1}},line:19},"3":{name:"(anonymous_3)",decl:{start:{line:26,column:35},end:{line:26,column:36}},loc:{start:{line:26,column:49},end:{line:28,column:3}},line:26},"4":{name:"whileCond",decl:{start:{line:31,column:11},end:{line:31,column:20}},loc:{start:{line:31,column:23},end:{line:35,column:3}},line:31},"5":{name:"(anonymous_5)",decl:{start:{line:32,column:31},end:{line:32,column:32}},loc:{start:{line:32,column:48},end:{line:34,column:5}},line:32},"6":{name:"(anonymous_6)",decl:{start:{line:38,column:26},end:{line:38,column:27}},loc:{start:{line:38,column:47},end:{line:86,column:3}},line:38},"7":{name:"(anonymous_7)",decl:{start:{line:53,column:55},end:{line:53,column:56}},loc:{start:{line:53,column:77},end:{line:55,column:5}},line:53},"8":{name:"(anonymous_8)",decl:{start:{line:73,column:24},end:{line:73,column:25}},loc:{start:{line:73,column:47},end:{line:84,column:7}},line:73}},branchMap:{"0":{loc:{start:{line:22,column:2},end:{line:23,column:34}},type:"if",locations:[{start:{line:22,column:2},end:{line:23,column:34}},{start:{line:22,column:2},end:{line:23,column:34}}],line:22},"1":{loc:{start:{line:44,column:4},end:{line:47,column:5}},type:"if",locations:[{start:{line:44,column:4},end:{line:47,column:5}},{start:{line:44,column:4},end:{line:47,column:5}}],line:44},"2":{loc:{start:{line:58,column:4},end:{line:85,column:5}},type:"if",locations:[{start:{line:58,column:4},end:{line:85,column:5}},{start:{line:58,column:4},end:{line:85,column:5}}],line:58},"3":{loc:{start:{line:60,column:6},end:{line:66,column:7}},type:"if",locations:[{start:{line:60,column:6},end:{line:66,column:7}},{start:{line:60,column:6},end:{line:66,column:7}}],line:60},"4":{loc:{start:{line:76,column:8},end:{line:76,column:29}},type:"if",locations:[{start:{line:76,column:8},end:{line:76,column:29}},{start:{line:76,column:8},end:{line:76,column:29}}],line:76}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"d34fc3e6b8297bcde183f5492bcb8fcb36775295"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();// Data Structure taken from https://github.com/mirkokiefer/ancestor
// Import libraries
var _=(cov_1ok0aezb88.s[0]++,require('underscore'));var async=(cov_1ok0aezb88.s[1]++,require('async'));// Walker method to record visited nodes
function Walker(startNode){cov_1ok0aezb88.f[0]++;cov_1ok0aezb88.s[2]++;this.visited=[];cov_1ok0aezb88.s[3]++;this.queue=[startNode];}// Merging walker method
cov_1ok0aezb88.s[4]++;Walker.prototype.merge=function(walker){cov_1ok0aezb88.f[1]++;cov_1ok0aezb88.s[5]++;this.queue=_.union(this.queue,walker.queue);};// Method to find LCA
function lowestCommonAncestor(startNodes,readParents,cb){cov_1ok0aezb88.f[2]++;cov_1ok0aezb88.s[6]++;// If less than 2 nodes, return the first node as LCA
if(startNodes.length<2){cov_1ok0aezb88.b[0][0]++;cov_1ok0aezb88.s[7]++;return cb(null,startNodes[0]);}else{cov_1ok0aezb88.b[0][1]++;}// Map each search node with a walker
var walkerStack=(cov_1ok0aezb88.s[8]++,startNodes.map(function(each){cov_1ok0aezb88.f[3]++;cov_1ok0aezb88.s[9]++;return new Walker(each);}));// Return the length of each walker queue
function whileCond(){cov_1ok0aezb88.f[4]++;cov_1ok0aezb88.s[10]++;return _.some(walkerStack,function(walker){cov_1ok0aezb88.f[5]++;cov_1ok0aezb88.s[11]++;return walker.queue.length;});}// Concurrently while there is still a quueu
cov_1ok0aezb88.s[12]++;async.whilst(whileCond,function(continueCb){cov_1ok0aezb88.f[6]++;// Grab a walker
var walker=(cov_1ok0aezb88.s[13]++,walkerStack.shift());// If the walkers queue isn't zero push to stack
cov_1ok0aezb88.s[14]++;if(walker.queue.length==0){cov_1ok0aezb88.b[1][0]++;cov_1ok0aezb88.s[15]++;walkerStack.push(walker);cov_1ok0aezb88.s[16]++;return continueCb();}else{cov_1ok0aezb88.b[1][1]++;}// Grab node from walker queue
var node=(cov_1ok0aezb88.s[17]++,walker.queue.shift());// Grab walker with common ancestor to node
var walkerWithCommonAncestor=(cov_1ok0aezb88.s[18]++,_.find(walkerStack,function(otherWalker){cov_1ok0aezb88.f[7]++;cov_1ok0aezb88.s[19]++;return _.contains(otherWalker.visited,node);}));// If a walker with common ancestor exists
cov_1ok0aezb88.s[20]++;if(walkerWithCommonAncestor){cov_1ok0aezb88.b[2][0]++;cov_1ok0aezb88.s[21]++;// If only node in stack return node
if(walkerStack.length==1){cov_1ok0aezb88.b[3][0]++;cov_1ok0aezb88.s[22]++;return cb(null,node);}else{cov_1ok0aezb88.b[3][1]++;cov_1ok0aezb88.s[23]++;// Otherwise merge walker with current common ancestors
walkerWithCommonAncestor.merge(walker);cov_1ok0aezb88.s[24]++;continueCb();}}else{cov_1ok0aezb88.b[2][1]++;cov_1ok0aezb88.s[25]++;// Otherwise declare walker as visited
walker.visited.push(node);// Read parents of node
cov_1ok0aezb88.s[26]++;readParents(node,function(err,parents){cov_1ok0aezb88.f[8]++;cov_1ok0aezb88.s[27]++;// If error, no parents exist
if(err){cov_1ok0aezb88.b[4][0]++;cov_1ok0aezb88.s[28]++;parents=[];}else{cov_1ok0aezb88.b[4][1]++;}// If parents, add to queue of walker
cov_1ok0aezb88.s[29]++;walker.queue=walker.queue.concat(parents);// Push walker to stack
cov_1ok0aezb88.s[30]++;walkerStack.push(walker);cov_1ok0aezb88.s[31]++;continueCb();});}},cb);}cov_1ok0aezb88.s[32]++;module.exports=lowestCommonAncestor;